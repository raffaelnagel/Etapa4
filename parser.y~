/*  Compiladores 2014/2 - Etapa 3
    Felipe Prusokowski e Raffael Nagel

*/				
		
%{ 
#include "ast.c"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "hash.h"
%}


%type<ast> EXPR
%type<ast> ATRIB
%type<ast> LISTCMD
%type<ast> BLOCO
%type<ast> RETURN
%type<ast> IF
%type<ast> IFCMD
%type<ast> CMD
%type<ast> IN
%type<ast> OUT
%type<ast> VETOR
%type<ast> RESTCMD
%type<ast> TIPO
%type<ast> LIT
%type<ast> DECLARACAOFUNC
%type<ast> DECLARACAONORMAL
%type<ast> DECLARACAOPOINT
%type<ast> DECLARACAO
%type<ast> DECLARACAOVAR
%type<ast> DECLARACAOARRAY
%type<ast> ATRIBDECLARACAOARRAY
%type<ast> VARLIT
%type<ast> program
%type<ast> OUTARGS
%type<ast> RESTARGSOUT
%type<ast> DECLARACAOPARAMFUNC
%type<ast> LISTPARAM
%type<ast> RESTLISTPARAM
%type<ast> VALLIST
%type<ast> PARAM
%type<ast> RESTPARAM
%type<ast> NEG
%token  KW_WORD
%token  KW_BOOL         
%token  KW_BYTE       
%token KW_IF         
%token KW_THEN       
%token KW_ELSE       
%token KW_LOOP 
%token KW_INPUT             
%token KW_OUTPUT      
%token KW_RETURN     

%token OPERATOR_LE   
%token OPERATOR_GE   
%token OPERATOR_EQ   
%token OPERATOR_NE   
%token OPERATOR_AND  
%token OPERATOR_OR   

%token<symbol> TK_IDENTIFIER 
%token<symbol> LIT_INTEGER   
%token<symbol> LIT_TRUE      
%token<symbol> LIT_FALSE     
%token<symbol> LIT_CHAR      
%token<symbol> LIT_STRING    
%token TOKEN_ERROR 


%union  
  {
  ast *ast;
  HASH* symbol;
  };

/* Maior precedencia */
%left  OPERATOR_OR OPERATOR_AND 
%nonassoc  OPERATOR_LE OPERATOR_GE OPERATOR_EQ OPERATOR_NE '<' '>'
%left '+' '-'
%left '*' '/'
%right '!' '$' '&'

%%

program: program DECLARACAO	{printf("OK\n");
				$$= astCreate(AST_PROGRAM,0,$2,0,0,0);
				astPrintTree($$,0);
				printf("descompilando \n");
				decompile($$);
				printf("setando tipos \n");
				astSetDeclarations($$);
				printf("testando tipos\n");
				astCheckDeclarations($$);
				printf("verificando natureza dos dados\n");
				//astCheckNature($$);
				}
	|  			{$$=0;}
	;
  	
DECLARACAOVAR: DECLARACAOVAR DECLARACAONORMAL ';' 	        {$$=astCreate(AST_DEC,0,$1,$2,0,0);}	
	| DECLARACAOVAR  DECLARACAOPOINT ';'			{$$=astCreate(AST_DEC,0,$1,$2,0,0);}
	|  DECLARACAOVAR DECLARACAOARRAY ';'			{$$=astCreate(AST_DEC,0,$1,$2,0,0);}
	|							{$$=0;}
;			

DECLARACAO: DECLARACAOVAR DECLARACAOFUNC ';'		{$$=astCreate(AST_DECLARACAO,0,$1,$2,0,0);}
	;

DECLARACAONORMAL: TIPO TK_IDENTIFIER ':' LIT	{$$=astCreate(AST_NDEC,$2,$1,$4,0,0);}
	;

DECLARACAOPOINT: TIPO '$' TK_IDENTIFIER ':' LIT	{$$=astCreate(AST_POINTER_DEC,$3,$1,$5,0,0);}
	;

DECLARACAOARRAY : TIPO TK_IDENTIFIER '['EXPR']' ATRIBDECLARACAOARRAY {$$=astCreate(AST_ARRAY_DEC,$2,$1,$4,$6,0);}
	;

 
ATRIBDECLARACAOARRAY: ':' VARLIT	{$$= $2;}
	|				{$$=0;}
	;

VARLIT: LIT				{$$= astCreate(AST_LIT_ATRIB,0,$1,0,0,0);}
	|     VARLIT LIT		{$$= astCreate(AST_LIT_ATRIB,0,$1,$2,0,0);}
	;


DECLARACAOFUNC :  TIPO TK_IDENTIFIER '(' DECLARACAOPARAMFUNC ')'  CMD   {$$=astCreate(AST_FUN_DEF,$2,$1,$4,$6,0);}
	|  						{$$=0;}
	;

DECLARACAOPARAMFUNC: LISTPARAM                     {$$=$1;}
	|				           {$$=0;}
	;

LISTPARAM: TIPO '$' TK_IDENTIFIER RESTLISTPARAM	   {$$=astCreate(AST_POINTER_DEC,$3,$1,$4,0,0);}
	|  TIPO TK_IDENTIFIER RESTLISTPARAM	   {$$=astCreate(AST_NDEC,$2,$1,$3,0,0);}
	;


RESTLISTPARAM: ',' LISTPARAM 			{$$=$2;}
	|					{$$=0;}
	;


BLOCO: '{' LISTCMD '}'   		{$$= astCreate(AST_BLOCO,0,$2,0,0,0);}
	;				

LISTCMD: CMD RESTCMD   			{$$= astCreate(AST_LISTCMD,0,$1,$2,0,0);}
	|				{$$=0;}
	;

CMD:  IN     				{$$=$1;}
	| ATRIB				{$$=$1;}
	| OUT	    			{$$=$1;}
	| IF				{$$=$1;}
	| RETURN			{$$=$1;}
	| BLOCO				{$$=$1;}
	;

RESTCMD: ';' LISTCMD			{$$= astCreate(AST_LISTCMD,0,$2,0,0,0);}
	;

IN: KW_INPUT TK_IDENTIFIER VETOR	{$$= astCreate(AST_IN,$2,0,$3,0,0);}
	|				{$$=0;}
	;


ATRIB: EXPR  '=' EXPR              {$$=astCreate(AST_ATRIB,0,$1,$3,0,0);}
	;

OUT: KW_OUTPUT OUTARGS                 {$$= astCreate(AST_OUT,0,$2,0,0,0);}
	;

OUTARGS: LIT_STRING RESTARGSOUT       {$$=astCreate(AST_OUTARGS_STRING,$1,0,$2,0,0);}
	|   EXPR RESTARGSOUT  	      {$$=astCreate(AST_OUTARGS_EXPR,0,$1,$2,0,0);}
	;

RESTARGSOUT: ',' OUTARGS             	{$$= 2;}
	|				{$$=0;}
	;

IF: KW_IF '(' EXPR ')' IFCMD CMD        {$$=astCreate(AST_IF,0,$3,$5,$6,0);}
	;

IFCMD: KW_THEN 				{$$=astCreate(AST_CMD_THEN,0,0,0,0,0);}
	| KW_ELSE			{$$=astCreate(AST_CMD_ELSE,0,0,0,0,0);}
	| KW_LOOP			{$$=astCreate(AST_CMD_LOOP,0,0,0,0,0);}
	;
	
RETURN: KW_RETURN EXPR			{$$=astCreate(AST_RETURN,0,$2,0,0,0);}
	;



VETOR: '['EXPR']'			{$$=astCreate(AST_INDEX,0,$2,0,0,0);}
	|				{$$=0;}
	;

EXPR: TK_IDENTIFIER VETOR		{$$=astCreate(AST_VETOR,$1,$2,0,0,0);}
	| '&' TK_IDENTIFIER		{$$=astCreate(AST_REFERENCE,$2, 0,0,0,0);}
	| '$' TK_IDENTIFIER		{$$=astCreate(AST_DE_REFERENCE,$2, 0,0,0,0);}
	| LIT_INTEGER			{$$=astCreate(AST_LIT_INTEGER,$1, 0,0,0,0);}
	| LIT_CHAR			{$$=astCreate(AST_LIT_CHAR,$1, 0,0,0,0);}
	| LIT_TRUE			{$$=astCreate(AST_LIT_TRUE,$1, 0,0,0,0);}
	| LIT_FALSE			{$$=astCreate(AST_LIT_FALSE,$1, 0,0,0,0);}
	| TK_IDENTIFIER '(' VALLIST ')' {$$= astCreate(AST_FUNC_CALL,$1,$3,0,0,0);}
	| NEG '(' EXPR ')'		{$$= astCreate(AST_NEG_EXPR,0,$1,$3,0,0);}
	| '(' EXPR ')'   		{$$=astCreate(AST_PAR_EXPR,0,0,$2,0,0);}
	| EXPR OPERATOR_LE EXPR		{$$=astCreate(AST_LE,0,$1,$3,0,0);}
	| EXPR OPERATOR_GE EXPR		{$$=astCreate(AST_GE,0,$1,$3,0,0);}
	| EXPR OPERATOR_EQ EXPR	        {$$=astCreate(AST_EQ,0,$1,$3,0,0);}
	| EXPR OPERATOR_NE EXPR	        {$$=astCreate(AST_NE,0,$1,$3,0,0);}
	| EXPR OPERATOR_AND EXPR	{$$=astCreate(AST_AND,0,$1,$3,0,0);}
	| EXPR OPERATOR_OR EXPR	        {$$=astCreate(AST_OR,0,$1,$3,0,0);}
	| EXPR '+' EXPR			{$$=astCreate(AST_ADD,0,$1,$3,0,0);}			
 	| EXPR '-' EXPR			{$$=astCreate(AST_SUB,0,$1,$3,0,0);}		
	| EXPR '*' EXPR			{$$=astCreate(AST_MUL,0,$1,$3,0,0);}
	| EXPR '/' EXPR			{$$=astCreate(AST_DIV,0,$1,$3,0,0);}			
	| EXPR '>' EXPR			{$$=astCreate(AST_GREATER,0,$1,$3,0,0);}	
	| EXPR '<' EXPR			{$$=astCreate(AST_LESS,0,$1,$3,0,0);}	
	;

NEG: '!'				{$$=astCreate(AST_BOOLEAN_NEG,0,0,0,0,0);}
	|'-'				{$$=astCreate(AST_ARIT_NEG,0,0,0,0,0);}
	;

VALLIST : PARAM				{$$=$1;}
	|				{$$=0;}
	;

PARAM:  EXPR RESTPARAM			{$$=astCreate(AST_PASS_PARAM,0,$1,$2,0,0);}
	;

RESTPARAM: ',' PARAM			{$$=astCreate(AST_PASS_PARAM,0,$2,0,0,0);}
	|				{$$=0;}
	;

LIT: LIT_INTEGER			{$$=astCreate(AST_LIT_INTEGER,$1,0,0,0,0);}
        |   LIT_CHAR			{$$=astCreate(AST_LIT_CHAR,$1,0,0,0,0);}	
        |   LIT_TRUE			{$$=astCreate(AST_LIT_TRUE,$1,0,0,0,0);}
	|   LIT_FALSE			{$$=astCreate(AST_LIT_FALSE,$1,0,0,0,0);}
	;


TIPO:  KW_WORD				{$$=astCreate(AST_WORD,0,0,0,0,0);}	
	|   KW_BOOL			{$$=astCreate(AST_BOOL,0,0,0,0,0);}	         
	|   KW_BYTE			{$$=astCreate(AST_BYTE,0,0,0,0,0);}
	;


%%
int yyerror( char* str)
 {
 fprintf(stderr,"ERROR ");
 printf ("Sintax error, line %d\n", getLineNumber());
 exit(3);
 return 0;
 }
